import tkinter as tk
from tkinter import ttk, messagebox
import serial

# ---------------- Diccionarios ----------------
registro_destino_bits = {
    "R1": "000", "R2": "010", "R3": "100", "R4": "110"
}

fuente_a_bits = {
    "R1": "000", "R2": "010", "R3": "001", "R4": "101"
}

fuente_b_bits = {
    "Entrada de datos": "0000", "R1": "0001", "R2": "0100", "R3": "0010", "R4": "1010"
}

corrimiento_bits = {
    "Sin corrimiento": "000", "Izquierda": "000", "Derecha": "000", "Izquierdax": "010", "Derechax": "001", "Transferencia": "011"
}

alu_bits = {
    "Transferencia":     ("0000", "0", "1"),
    "Suma":              ("1001", "0", "1"),
    "Decremento A1":     ("1111", "0", "1"),
    "Incremento A1":     ("0000", "0", "0"),
    "Resta":             ("0110", "0", "0"),
    "Multiplicacion":    ("1101", "0", "0"),
    "Transferencia 2":   ("1111", "1", "0"),
    "AND":               ("1101", "1", "0"),
    "OR":                ("0111", "1", "0"),
    "XOR":               ("0110", "1", "0"),
    "NOT":               ("0000", "1", "0"),
    "No operation":      ("1111", "1", "0")
}

unary_ops = {"NOT", "Incremento A1", "Decremento A1"}

registro_contenido = {
    "R1": "0110",
    "R2": "0000",
    "R3": "0000",
    "R4": "0000"
}

# ---------------- Interfaz ----------------
class ControlGUI:
    def _init_(self, root):
        self.root = root
        self.root.title("Generador de Palabra de Control")
        self.root.geometry("740x640")
        self.root.resizable(False, False)

        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TButton", font=("Segoe UI", 14, "bold"), padding=12)
        style.configure("TLabel", font=("Segoe UI", 13))
        style.configure("TLabelframe", font=("Segoe UI", 15, "bold"))
        style.configure("TRadiobutton", font=("Segoe UI", 13))
        style.configure("TEntry", font=("Segoe UI", 13))
        style.configure("TCombobox", font=("Segoe UI", 13))

        self.serial_port = serial.Serial("COM9", 115200, timeout=1)

        self.symbolic_frame = ttk.LabelFrame(root, text="Selección simbólica")
        self.symbolic_frame.grid(row=0, column=0, padx=25, pady=25, sticky="ew")

        self.fields = {}
        self.create_dropdown("Registro destino", registro_destino_bits.keys(), 0)
        self.create_dropdown("Fuente A", fuente_a_bits.keys(), 1)
        self.create_dropdown("Fuente B", fuente_b_bits.keys(), 2)
        self.create_dropdown("Unidad de corrimiento", corrimiento_bits.keys(), 3)
        self.create_dropdown("Operación ALU", alu_bits.keys(), 4, self.operacion_cambiada)

        self.fuente_activa = tk.StringVar(value="A")
        self.radio_a = ttk.Radiobutton(self.symbolic_frame, text="Usar Fuente A", variable=self.fuente_activa, value="A", command=self.actualizar_estado_fuentes)
        self.radio_b = ttk.Radiobutton(self.symbolic_frame, text="Usar Fuente B", variable=self.fuente_activa, value="B", command=self.actualizar_estado_fuentes)
        self.radio_a.grid(row=1, column=2, padx=10, pady=8, sticky="w")
        self.radio_b.grid(row=2, column=2, padx=10, pady=8, sticky="w")

        self.extra_bits_label = ttk.Label(self.symbolic_frame, text="Número (1-15):")
        self.extra_bits_label.grid(row=5, column=0, sticky="e", pady=(18, 0))
        self.extra_bits_entry = ttk.Entry(self.symbolic_frame, width=10, state="disabled", font=("Segoe UI", 13))
        self.extra_bits_entry.grid(row=5, column=1, pady=(18, 0), sticky="w")

        ttk.Separator(root, orient="horizontal").grid(row=1, column=0, sticky="ew", padx=25, pady=10)

        self.binary_label = ttk.Label(root, text="Palabra binaria:", font=("Segoe UI", 13, "bold"))
        self.binary_label.grid(row=2, column=0, padx=25, pady=(10, 0), sticky="w")
        self.hex_label = ttk.Label(root, text="Palabra hexadecimal:", font=("Segoe UI", 13, "bold"))
        self.hex_label.grid(row=3, column=0, padx=25, pady=(0, 10), sticky="w")

        button_frame = ttk.Frame(root)
        button_frame.grid(row=4, column=0, pady=25, padx=25, sticky="ew")
        ttk.Button(button_frame, text="Enviar al Arduino", command=self.send_control_word).grid(row=0, column=0, padx=10, pady=8, ipadx=10, ipady=5)
        ttk.Button(button_frame, text="Activar CLK (Enter)", command=self.send_clock_signal).grid(row=0, column=1, padx=10, pady=8, ipadx=10, ipady=5)
        ttk.Button(button_frame, text="Limpiar registros", command=self.send_clear_signal).grid(row=0, column=2, padx=10, pady=8, ipadx=10, ipady=5)

        self.fields["Fuente B"].bind("<<ComboboxSelected>>", lambda e: self.actualizar_estado_numero())
        self.fields["Unidad de corrimiento"].bind("<<ComboboxSelected>>", lambda e: None)
        self.fields["Operación ALU"].bind("<<ComboboxSelected>>", lambda e: self.operacion_cambiada())

        self.operacion_cambiada()

    def create_dropdown(self, label_text, options, row, command=None):
        label = ttk.Label(self.symbolic_frame, text=label_text)
        label.grid(row=row, column=0, sticky="e", pady=8, padx=5)
        combo = ttk.Combobox(self.symbolic_frame, values=list(options), state="readonly", width=18)
        combo.grid(row=row, column=1, pady=8, padx=5)
        combo.current(0)
        if command:
            combo.bind("<<ComboboxSelected>>", lambda e: command())
        self.fields[label_text] = combo

    def operacion_cambiada(self):
        op = self.fields["Operación ALU"].get()
        if op in {"Transferencia", "Transferencia 2"}:
            self.radio_a.config(state="normal")
            self.radio_b.config(state="normal")
        else:
            self.radio_a.config(state="disabled")
            self.radio_b.config(state="disabled")

        if op in unary_ops:
            self.fields["Fuente A"].config(state="disabled")
            self.fields["Fuente B"].config(state="readonly")
        elif op in {"Transferencia", "Transferencia 2"}:
            self.actualizar_estado_fuentes()
        else:
            self.fields["Fuente A"].config(state="readonly")
            self.fields["Fuente B"].config(state="readonly")
        self.actualizar_estado_fuentes()

    def actualizar_estado_fuentes(self):
        op = self.fields["Operación ALU"].get()
        if op in {"Transferencia", "Transferencia 2"}:
            if self.fuente_activa.get() == "A":
                self.fields["Fuente A"].config(state="readonly")
                self.fields["Fuente B"].config(state="disabled")
            else:
                self.fields["Fuente A"].config(state="disabled")
                self.fields["Fuente B"].config(state="readonly")
        elif op not in unary_ops:
            self.fields["Fuente A"].config(state="readonly")
            self.fields["Fuente B"].config(state="readonly")
        self.actualizar_estado_numero()

    def actualizar_estado_numero(self):
        op = self.fields["Operación ALU"].get()
        fuente = self.fuente_activa.get()
        fuente_b = self.fields["Fuente B"].get()
        if op in {"Transferencia", "Transferencia 2"} and fuente == "B" and fuente_b == "Entrada de datos":
            self.extra_bits_entry.config(state="normal")
        else:
            self.extra_bits_entry.delete(0, tk.END)
            self.extra_bits_entry.config(state="disabled")

    def aplicar_corrimiento(self, reg, tipo):
        actual = registro_contenido[reg]
        if tipo == "Izquierda":
            resultado = actual[1:] + "0"
        elif tipo == "Derecha":
            resultado = "0" + actual[:3]
        else:
            resultado = actual
        registro_contenido[reg] = resultado

    def generate_control_word(self):
        reg_dest = self.fields["Registro destino"].get()
        tipo_corr = self.fields["Unidad de corrimiento"].get()
        self.aplicar_corrimiento(reg_dest, tipo_corr)

        dest = registro_destino_bits[reg_dest]
        op = self.fields["Operación ALU"].get()

        if op in {"Transferencia", "Transferencia 2"}:
            if self.fuente_activa.get() == "A":
                a = fuente_a_bits[self.fields["Fuente A"].get()]
                b = "0000"
            else:
                a = "000"
                b = fuente_b_bits[self.fields["Fuente B"].get()]
        elif op in unary_ops:
            a = "000"
            b = fuente_b_bits.get(self.fields["Fuente B"].get(), "0000")
        else:
            a = fuente_a_bits[self.fields["Fuente A"].get()]
            b = fuente_b_bits.get(self.fields["Fuente B"].get(), "0000")

        corr = corrimiento_bits[tipo_corr]
        alu_op, modo, cin = alu_bits[op]

        # Por defecto, usar el contenido del registro destino
        extra_bits = registro_contenido[reg_dest]

        # Si la entrada es manual y seleccionada, se sobreescribe
        if (
            op in {"Transferencia", "Transferencia 2"}
            and self.fuente_activa.get() == "B"
            and self.fields["Fuente B"].get() == "Entrada de datos"
        ):
            try:
                number = int(self.extra_bits_entry.get())
                if not (1 <= number <= 15):
                    raise ValueError
                extra_bits = format(number, '04b')
            except ValueError:
                messagebox.showerror("Error", "Ingrese un número entre 1 y 15.")
                return ""

        word = dest + a + b + corr + alu_op + modo + cin + extra_bits
        hex_word = hex(int(word, 2))[2:].upper().zfill(6)
        self.binary_label.config(text=f"Palabra binaria: {word}")
        self.hex_label.config(text=f"Palabra hexadecimal: {hex_word}")
        return hex_word

    def send_control_word(self):
        word = self.generate_control_word()
        if word:
            self.serial_port.write((word + '\n').encode())

    def send_clock_signal(self):
        if self.serial_port.is_open:
            self.serial_port.write(b'C\n')

    def send_clear_signal(self):
        if self.serial_port.is_open:
            self.serial_port.write(b'L\n')

if _name_ == '_main_':
    root = tk.Tk()
    app = ControlGUI(root)
    root.protocol("WM_DELETE_WINDOW", lambda: (app.serial_port.close(), root.destroy()))
    root.mainloop()
